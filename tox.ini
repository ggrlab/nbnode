# Tox configuration file
# Read more under https://tox.wiki/

[tox]
minversion = 3.24
# envlist = default
isolated_build = True


# This is the "basic" environment. If another environment (testenv:{env_name}) does not
# specify any variable, it is replaced by this here
# To run, call
#   tox
[testenv]
description = Invoke pytest to run automated tests
setenv =
    TOXINIDIR = {toxinidir}
passenv =
    HOME
    SETUPTOOLS_*
extras =
    testing
commands =
    # # to run unittest tests, use the following command:
    # # https://docs.pytest.org/en/7.1.x/how-to/unittest.html
    # pytest tests
    # The following command runs all tests in the current directory and below
    # https://tox.wiki/en/latest/config.html#substitutions-for-positional-arguments-in-commands
    pytest {posargs}

#   tox -e test
[testenv:test]
description = Invoke pytest to run automated tests, re-run only the failures
setenv =
    TOXINIDIR = {toxinidir}
passenv =
    HOME
    SETUPTOOLS_*2
extras =
    testing
commands =
    pytest --no-cov --testmon

#   tox -e coverage
[testenv:coverage]
description = Invoke pytest to run automated tests, re-run only the failures
setenv =
    TOXINIDIR = {toxinidir}
passenv =
    HOME
    SETUPTOOLS_*
extras =
    testing
commands =
    # pytest -rFEx --durations 10 --color yes --last-failed --last-failed-no-failures none --cov=src/
    # The "-" in front allows the following command to fail
    # https://tox.wiki/en/3.1.0/config.html#confval-commands=ARGVLIST
    ; - pytest -rFEx --durations 10 --color yes --last-failed  --last-failed-no-failures none --cov=src/
    # "-": ignore exit code of the command: https://tox.wiki/en/latest/faq.html#ignoring-the-exit-code-of-a-given-command
    - pytest -rFEx --durations 10 --color yes --cov=src/
    # Use previously generated coverage file (after pytest fails when no tests failed)
    coverage html
    docstr-coverage src/nbnode --config .docstr.yaml

#   tox -e coverage_noretest
[testenv:coverage_noretest, coverage_]
description = Invoke pytest to run automated tests, re-run only the failures
setenv =
    TOXINIDIR = {toxinidir}
passenv =
    HOME
    SETUPTOOLS_*
extras =
    testing
commands =
    # "-": ignore exit code of the command: https://tox.wiki/en/latest/faq.html#ignoring-the-exit-code-of-a-given-command
    - coverage html
    docstr-coverage src/nbnode --config .docstr.yaml

# To run, call
#   tox -e coverage_githubCI
[testenv:coverage_githubCI]
description = Invoke pytest to run automated tests
setenv =
    TOXINIDIR = {toxinidir}
passenv =
    HOME
    SETUPTOOLS_*
deps =
    pytest
    pytest-cov
extras =
    testing
commands =
    ; https://tox.wiki/en/latest/faq.html#ignoring-the-exit-code-of-a-given-command
    ; "- COMMAND" # This command's EXIT code is ignored because of the "-" prefix
    pytest --cov=src/ --cov-report=html --cov-report=term --cov-report=xml --cov-report=annotate --cov-report=term-missing --cov-fail-under=90 --cov-append --cov-config=setup.cfg  {posargs}


# To run `tox -e lint` you need to make sure you have a
# `.pre-commit-config.yaml` file. See https://pre-commit.com
[testenv:lint]
description = Perform static analysis and style checks
skip_install = True
deps = pre-commit
passenv =
    HOMEPATH
    PROGRAMDATA
    SETUPTOOLS_*
commands =
    pre-commit run --all-files {posargs:--show-diff-on-failure}


[testenv:{build,clean}]
description =
    build: Build the package in isolation according to PEP517, see https://github.com/pypa/build
    clean: Remove old distribution files and temporary build artifacts (./build and ./dist)
# https://setuptools.pypa.io/en/stable/build_meta.html#how-to-use-it
skip_install = True
changedir = {toxinidir}
deps =
    build: build[virtualenv]
passenv =
    SETUPTOOLS_*
commands =
    clean: python -c 'import shutil; [shutil.rmtree(p, True) for p in ("build", "dist", "docs/_build")]'
    clean: python -c 'import pathlib, shutil; [shutil.rmtree(p, True) for p in pathlib.Path("src").glob("*.egg-info")]'
    build: python -m build {posargs}
# By default, both `sdist` and `wheel` are built. If your sdist is too big or you don't want
# to make it available, consider running: `tox -e build -- --wheel`


[testenv:{docs,doctests,linkcheck}]
description =
    docs: Invoke sphinx-build to build the docs
    doctests: Invoke sphinx-build to run doctests
    linkcheck: Check for broken links in the documentation
passenv =
    SETUPTOOLS_*
setenv =
    DOCSDIR = {toxinidir}/docs
    BUILDDIR = {toxinidir}/docs/_build
    docs: BUILD = html
    doctests: BUILD = doctest
    linkcheck: BUILD = linkcheck
deps =
    -r {toxinidir}/docs/requirements.txt
    # ^  requirements.txt shared with Read The Docs
commands =
    sphinx-build --color -b {env:BUILD} -d "{env:BUILDDIR}/doctrees" "{env:DOCSDIR}" "{env:BUILDDIR}/{env:BUILD}" {posargs}
    docstr-coverage src/nbnode --config .docstr.yaml


[testenv:publish]
description =
    Publish the package you have been developing to a package index server.
    By default, it uses testpypi. If you really want to publish your package
    to be publicly accessible in PyPI, use the `-- --repository pypi` option.
skip_install = True
changedir = {toxinidir}
passenv =
    # See: https://twine.readthedocs.io/en/latest/
    TWINE_USERNAME
    TWINE_PASSWORD
    TWINE_REPOSITORY
    TWINE_REPOSITORY_URL
deps = twine
commands =
    python -m twine check dist/*
    python -m twine upload {posargs:--repository {env:TWINE_REPOSITORY:testpypi}} dist/*
